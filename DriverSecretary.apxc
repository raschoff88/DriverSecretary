public class DriverNotesSecretary {
    @future(callout=true)
    public static void mainAsync(String inputText, Id oppId) {
        Opportunity delivery = [SELECT Id, Name, AccountId, CloseDate, Delivery_Is_New__c, StageName FROM Opportunity WHERE Id = :oppId];
        main(inputText, delivery);
    }
    private static final String MAIN_PROMPT_TEXT = 'Background Information:' + 
        'You are a secretary at an alkaline water delivery company. Your role involves interpreting messages from the company\'s drivers and the associated customer account details to determine the situation from 15 possible scenarios.' + '\n\n' + 
        'Product Details:' + '\n' + 
        '- The company sells three types of products:' + '\n' + 
        '  - Alkaline water' + '\n' + 
        '  - Spring water' + '\n' + 
        '  - Water bottle packs' + '\n' + 
        '  (Sometimes the names will be shortened)' + '\n\n' + 
        '- Both Alkaline and Spring water can be packaged in:' + '\n' + 
        '  - Standard plastic' + '\n' + 
        '  - BPA free plastic' + '\n' + 
        '  (If unsure, assume the bottle is "standard plastic").' + '\n\n' + 
        'Decision Options:' + '\n' + 
        'Based on the input, decide from the following actions:' + '\n' + 
        '- "Change in the number of bottles delivered"' + '\n' + 
        '- "Location where bottles were left"' + '\n' + 
        '- "Different product delivered"' + '\n' + 
        '- "Unable to accommodate delivery request"' + '\n' + 
        '- "New instructions for dropping off bottle"' + '\n' + 
        '- "Change address or contact info"' + '\n' + 
        '- "Customer was present at time of delivery"' + '\n' + 
        '- "Failed delivery attempt"' + '\n' + 
        '- "Picked up cooler"' + '\n' + 
        '- "Dropped off additional product type"' + '\n' + 
        '- "Change monthly delivery amount"' + '\n' + 
        '- "Skip next delivery"' + '\n' + 
        '- "Picked up empty bottles"' + '\n' + 
        '- "No empty bottles left outside"' + '\n' + 
        '- "Unsure / not applicable"' + '\n\n' + 
        'Input Format:' + '\n' + 
        'The input will have the following python dictionary structure:' + '\n' + 
        '{"Driver Notes": …, "Customer Name": …, "Number of Bottles": …, "Water type": …, "Number of water bottle packs delivered": …, "Empty bottles in customer possession":...}' + '\n\n' + 
        'For example:' + '\n' + 
        '{"Driver Notes": "Delivered 2 bottles, customer was present", "Customer Name": "John Doe", "Number of Bottles": 2, "Water type": "Alkaline", "Number of water bottle packs delivered": 0, "Empty bottles in customer possession": 1}' + '\n\n' + 
        'Decision Criteria:' + '\n' + 
        'You may decide on multiple of the 15 different possibilities:' + '\n' + 
        '- Select "Change in the number of bottles delivered" if the number in the "Driver Notes" doesn\'t match "Number of Bottles" do not consider "Empty Bottles in customer possesion".' + '\n' + 
        '- Select "Location where bottles were left" if the driver states the location of where bottles are left off in "Driver Notes"' + '\n' + 
        '- Select "Different product delivered" if the driver states that they dropped off a product type in "Driver Notes" which is different from "Water type"' + '\n' + 
        '- Select "Unable to accommodate delivery request" if the "Driver Notes" mention that the customer asked for something that the driver could not provide.' + '\n' + 
        '- Select "New instructions for dropping off bottles" if the driver mentions that the customer wants the bottles to be placed in a specific location in "Driver Notes"' + '\n' + 
        '- Select "Change address or contact info" if the driver mentions that the address should be changed in "Driver Notes" or provides the name and phone number of a customer' + '\n' + 
        '- Select "Customer was present at time of delivery" if the driver mentions that the customer was present in "Driver Notes"' + '\n' + 
        '- Select "Failed delivery attempt" if the driver says that they were unable to complete the delivery in "Driver Notes"' + '\n' + 
        '- Select "Picked up cooler" if the driver mentions that they have taken a cooler in "Driver Notes"' + '\n' + 
        '- Select "Dropped off additional product type" if the driver mentions dropping off in the "Driver Notes" a product whose value of  "Number of Bottles" or "Number of water bottle packs delivered" is 0, i.e. a product which was not originally planned to be delivered.' + '\n' + 
        '- Select "Change monthly delivery amount" if the "Driver Notes" mention to change the delivery next month.' + '\n' + 
        '- Select "Skip next delivery" if the "Driver Notes" mention to skip the next delivery.' + '\n' + 
        '- Select "Picked up empty bottles" if the "Driver Notes" mention that they picked up a number of empty bottles that is different from "Empty bottles in customer possession".' + '\n' + 
        '- Select "No empty bottles left outside" if the "Driver Notes" mentions that no empty bottles were picked up.' + '\n' + 
        '- Select "Unsure / not applicable" if you are unable to select any of the above options based on the "Driver Notes"' + '\n\n' + 
        'Output Format:' + '\n' + 
        'Your response should be a python list, e.g., ["Option 1", "Option 2",...]';
        
    private static final String MAIN_PROMPT_TEXT_EXAMPLES = 'Here are some sample inputs with their corresponding outputs:' + '\n\n' + 
        
        'Input:' + '\n' + 
        '{\n    "Driver Notes": "8 bottles delivered",\n    "Customer Name": "CFH-30th Street Men\'s Intake Shelter",\n    "Number of Bottles": 7,\n    "Empty bottles in customer possession": 2\n}' + '\n' + 
        'Output: ["Change in the number of bottles delivered"]' + '\n\n' +
        
        'Input:' + '\n' + 
        '{\n    "Driver Notes": "One box of cups",\n    "Customer Name": "200 East 36 Street- Coop",\n    "Number of Bottles": 0,\n    "Empty bottles in customer possession": 0\n}' + '\n' + 
        'Output: ["Unsure / not applicable"]' + '\n\n' +
        
        'Input:' + '\n' + 
        '{\n    "Driver Notes": "Only want 5 bottles",\n    "Customer Name": "Antonio Lozito",\n    "Number of Bottles": 10,\n    "Empty bottles in customer possession": 2\n}' + '\n' + 
        'Output: ["Change in the number of bottles delivered"]' + '\n\n' +
        
        'Input:' + '\n' + 
        '{\n    "Driver Notes": "Left with customer",\n    "Customer Name": "Robert Shaw",\n    "Number of Bottles": 4,\n    "Empty bottles in customer possession": 0\n}' + '\n' + 
        'Output: ["Customer was present at time of delivery"]' + '\n\n' +
        
        'Input:' + '\n' + 
        '{\n    "Driver Notes": "Don\'t want spring water, no more alk",\n    "Customer Name": "Candace Kane",\n    "Number of Bottles": 0,\n    "Empty bottles in customer possession": 0\n}' + '\n' + 
        'Output: ["Failed Delivery Attempt"]' + '\n\n' +
        
        'Input:' + '\n' + 
        '{\n    "Driver Notes": "Placed inside  their home",\n    "Customer Name": "Sean Sullivan",\n    "Number of Bottles": 4,\n    "Empty bottles in customer possession": 2\n}' + '\n' + 
        'Output: ["Location where bottles were left"]' + '\n\n' +
        
        'Input:' + '\n' + 
        '{\n    "Driver Notes": "Change note leave by front door",\n    "Customer Name": "SPRING Nicole Baiocco",\n    "Number of Bottles": 15,\n    "Empty bottles in customer possession": 10\n}' + '\n' + 
        'Output: ["New instructions for dropping off bottles"]' + '\n\n' +
        
        'Input:' + '\n' + 
        '{\n    "Driver Notes": "Address really is 310 prospect",\n    "Customer Name": "Everton Wright",\n    "Number of Bottles": 10,\n    "Empty bottles in customer possession": 5\n}' + '\n' + 
        'Output: ["Wrong address given in account"]' + '\n\n' +
        
        'Input:' + '\n' + 
        '{\n    \'Driver Notes\': \'Only wanted to replace empties\',\n    \'Customer Name\': \'Segreto & Segreto LLP\',\n    \'Number of Bottles\': 4,\n    \'Empty bottles in customer possession\': 3\n}' + '\n' + 
        'Output: ["Picked up empty bottles"]' + '\n\n' +
        
        'Input:' + '\n' + 
        '{\n    \'Driver Notes\': \'Cancel next 2 delivereies\',\n    \'Customer Name\': \'Brianna Manente Options Plus\',\n    \'Number of Bottles\': 6,\n    \'Empty bottles in customer possession\': 0\n}' + '\n' + 
        'Output: ["Skip next delivery"]' + '\n\n' +
        
        'Input:' + '\n' + 
        '{\n    \'Driver Notes\': \'Did not see empties. Secretary had me leave it in kitchen\',\n    \'Customer Name\': \'U.S. Financial Services\',\n    \'Number of Bottles\': 3,\n    \'Empty bottles in customer possession\': 1\n}' + '\n' + 
        'Output: ["No empty bottles left outside", "Location where bottles were left"]';
	
    private static final String  location_of_bottles_prompt_text = 'Background Information:' +
        '\nYou are a secretary at a water delivery company that specializes in delivering alkaline water. After each delivery, drivers provide \'Driver Notes\' detailing the specifics of the delivery. Your role is to read these notes and compose a short, informative sentence to be included in an email to customers about the location of their delivered bottles.' +
        '\n' +
        '\nProduct Details:' +
        '\n- The company offers three types of products:' +
        '\n  - Alkaline water ' +
        '\n  - Spring water' +
        '\n  - Water bottle packs' +
        '\n  (Note: Names may sometimes be abbreviated)' +
        '\n- Both Alkaline and Spring water can be packaged in:' +
        '\n  - Standard plastic' +
        '\n  - BPA free plastic ' +
        '\n  (If unsure about the type of bottle, assume it\'s "standard plastic").' +
        '\n' +
        '\nInstructions:' +
        '\n1. If the \'Driver Notes\' mention a person receiving the delivery or don\'t specify the location of the bottles, respond with "N/A".' +
        '\n2. If the \'Driver Notes\' include phrases like "left with...", summarize this in a brief sentence for the customer.' +
        '\n3. Any content in the \'Driver Notes\' not about the bottle\'s placement should be disregarded.' +
        '\n4. Focus on verbs such as "left", "placed", or "put" to determine the delivery context. Conversely, terms like "found", "picked up", or "took" often refer to empty bottle collection.' +
        '\n5. Ensure your output is clear and easily understandable for the customer.' +
        '\n' +
        '\nInput Format:' +
        '\nA brief string from a truck driver, which may contain informal language, abbreviations, or spelling mistakes.' +
        '\n' +
        '\nOutput Format:' +
        '\nA string (max 200 characters) that informs the customer of their bottles\' location or "N/A". The message should be grammatical, well-spoken, friendly, and clear.' +
        '\n' +
        '\nExamples:' +
        '\n  Input: "Left in backyard"' +
        '\n  Output: "Your delivery was left in your backyard."' +
        '\n' +
        '\n  Input: "Left on porch"' +
        '\n  Output: "Your delivery was left on your porch."' +
        '\n' +
        '\n  Input: "Did not see empties. Secretary had me leave it in kitchen"' +
        '\n  Output: "Your delivery was left in your kitchen."' +
        '\n' +
        '\n  Input: "Wants to skip next delivery, bottles placed behind front gate."' +
        '\n  Output: "Your delivery was left behind your front gate."' +
        '\n' +
        '\n  Input: "No empties at front door"' +
        '\n  Output: "N/A"';


    private static final String  skip_next_delivery_prompt_text = 'Background Information:' +
        '\nYou are a secretary at a water delivery company that specializes in delivering alkaline water. After each delivery, drivers provide \'Driver Notes\' detailing the specifics of the delivery. Your role is to read these notes and determine parameters necessary for scheduling the next delivery.' +
        '\n' +
        '\nProduct Details:' +
        '\n- The company offers three types of products:' +
        '\n  - Alkaline water ' +
        '\n  - Spring water' +
        '\n  - Water bottle packs' +
        '\n  (Note: Names may sometimes be abbreviated)' +
        '\n- Both Alkaline and Spring water can be packaged in:' +
        '\n  - Standard plastic' +
        '\n  - BPA free plastic ' +
        '\n  (If unsure about the type of bottle, assume it\'s "standard plastic").' +
        '\n' +
        '\nDelivery Details:' +
        '\nCustomers may be delivered on the following frequencies:' +
        '\n  - Weekly, Biweekly, Monthly, Bimonthly' +
        '\n' +
        '\nInstructions:' +
        '\n1. If \'Driver Notes\' mention \'cancelling\', \'rescheduling\', or \'skipping\' future deliveries, respond with the number of deliveries to be skipped. Use the date and delivery frequency if necessary.' +
        '\n2. Ignore content unrelated to skipping deliveries.' +
        '\n3. If notes are ambiguous or talk about the current delivery, output "Needs Review".' +
        '\n4. If notes mention skipping 3 or more deliveries, output "Needs Review".' +
        '\n5. If no content relates to skipping a delivery, output "N/A".' +
        '\n' +
        '\nInput:' +
        '\nA tuple of (\'Driver Notes\',\'Date\',\'Delivery Frequency\') where:' +
        '\n- \'Driver Notes\' may contain informal language or abbreviations.' +
        '\n- \'Date\' is in "MM/DD/YY" format.' +
        '\n- \'Delivery Frequency\' is one of the frequencies listed above.' +
        '\n' +
        '\nOutput:' +
        '\nA string: "{Number of deliveries skipped}", "Needs Review", or "N/A".' +
        '\n' +
        '\nExamples:' +
        '\n  Input: ("Wants to cancel next week", "10/06/23", "Weekly")' +
        '\n  Ouput: "1"' +
        '\n' +
        '\n  Input: ("Cancel next 2 delivereies","08/15/20", "Monthly")' +
        '\n  Output: "2"' +
        '\n' +
        '\n  Input: ("Skip till June", "04/10/21", "Monthly")' +
        '\n  Output: "1"' +
        '\n' +
        '\n  Input: ("Cancel next month and delivery double the bottles on the next delivery", "07/24/23", "Monthly")' +
        '\n  Output: "1"' +
        '\n' +
        '\n  Input: ("Customer will call when he needs waters call before delivery", "01/05/22", "Weekly")' +
        '\n  Output: "Needs Review"' +
        '\n' +
        '\n  Input: ("Didn’t want delivery this week ……", "02/03/19", "Biweekly")' +
        '\n  Output: "Needs Review"' +
        '\n' +
        '\n  Input: ("They had over 50 bottles they did not want delivery. They will call when they need deliver y", "05/05/23", "Monthly")' +
        '\n  Ouput: "Needs Review"' +
        '\n' +
        '\n  Input: ("Theyre going to need a pick up only; make day time delivery, closed during day", "10/23/21","Biweekly")' +
        '\n  Ouput: "N/A"' +
        '\n' +
        '\n  Input: ("Only want 2", "07/10/21","Monthly")' +
        '\n  Ouput: "N/A"  ' +
        '\n' +
        '\n  Input; ("Reschedule for tomorrow at 11.00am. confirmed wit customer", "Monthly)' +
        '\n  Ouput: "Needs Review"';

    private static final String  change_address_or_contact_prompt_text ='Background Information:' +
        '\nYou are a secretary at a water delivery company that specializes in delivering alkaline water. After each delivery, drivers provide \'Driver Notes\' detailing any changes to the delivery address or contact number. Your role is to read these notes, the account on file, and the contact on file and output the appropriate change.' +
        '\n' +
        '\nProduct Details:' +
        '\n- The company offers three types of products:' +
        '\n  - Alkaline water ' +
        '\n  - Spring water' +
        '\n  - Water bottle packs' +
        '\n  (Note: Names may sometimes be abbreviated)' +
        '\n- Both Alkaline and Spring water can be packaged in:' +
        '\n  - Standard plastic' +
        '\n  - BPA free plastic ' +
        '\n  (If unsure about the type of bottle, assume it\'s "standard plastic").' +
        '\n' +
        '\nInstructions:' +
        '\n1. If the \'Driver Notes\' mentions "change address", "new address", "new location" you will review the current address respond with the new address' +
        '\n2. If the \'Driver Notes\' mentions the name of a person and a phone number or a phrase like "contact ...." you will respond with the name and phone of the new contact. If the contact name is ever unclear, you can say "Possible {account contact name}".' +
        '\n3. Any content in the \'Driver Notes\' not about a change of address or contact information should be ignored.' +
        '\n4. If ever anbiguous or unclear, you must respond with "Needs Review"' +
        '\n5. If the message does not contain anything about a change of address or contact, you should respond with "N/A"' +
        '\n' +
        '\nInput Format:' +
        '\nA tuple of the form (\'Driver Notes\',\'Current Address\',\'Current Contact\')' +
        '\n- \'Driver Notes\' may contain informal language or abbreviations.' +
        '\n- \'Current Address\' may contain common abbreviations and even typos.' +
        '\n- \'Current Contact\' will be the name of someone with possibly some omissions and misspelling. Assume the current contact spelling is correct however.' +
        '\n' +
        '\nOutput Format:' +
        '\nA python dictionary of the form:' +
        '\n    {' +
        '\n        "change": "address" or "contact", ' +
        '\n        "address":"{new address}" (if a change of address),' +
        '\n        "contact name": "{new contact name}" (if a change of contact),' +
        '\n        "contact number": "{new contact number}" (if a change of contact) ' +
        '\n    }' +
        '\nor "Needs Review" or "N/A"' +
        '\n' +
        '\nExamples:' +
        '\n  Input: ("Address really is 310 prospect", "312 prospect ave mamaroneck ny", "Abdul Wassef")' +
        '\n  Output: {"change":"address", "address":"310 prospect ave mamaroneck ny"}' +
        '\n' +
        '\n  Input: ("Door code is key863863key Leave bottles in package room code 542", "10 Clark St. Ma", "Peter Weiss")' +
        '\n  Output: "N/A"' +
        '\n' +
        '\n  Input: ("9746644501 Patricia", "200 Government Center Blvd, Lake Alfred, FL 33850", "Scott Varadhan")' +
        '\n  Output: {"change": "contact", "contact name": "Patricia", "contact number": "9746644501"}' +
        '\n' +
        '\n  Input: (" can call this # on site 929-361-5365 he will meet you", "118 Chestnut St, Cloverport, KY 40111", "Rajesh Chowla")' +
        '\n  Output: {"change": "contact", "contact name": "Possibly Rajesh Chowla"}' +
        '\n' +
        '\n  Input: ("Wrong address, is 10 Grover Street", "10 Grove Street, Wayne, NJ", "Ezekiel Suarez")' +
        '\n  Output: {"change": "address", "address": "10 Grover Street, Wayne, NJ"}' +
        '\n' +
        '\n  Input: ("New apartment number is 2603, no more 1007", "10 Park St. Hoboken, NJ, Apt No. 1007", "Marcus Deligne")' +
        '\n  Ouput: {"change": "address", "address": "10 Park St. Hoboken, NJ, Apt No. 2603"}';
    
    private static final String  change_monthly_delivery_amount_prompt_text = 
    'Background Information:\n' +
    'You are a secretary at a water delivery company that specializes in delivering alkaline water. After each delivery, drivers provide \'Driver Notes\' detailing any changes to a customer\'s future deliveries. Your role is to read these notes and the account on file, and output the appropriate change.\n\n' +
    'Product Details:\n' +
    '- The company offers three types of products:\n' +
    '  - Alkaline water\n' +
    '  - Spring water\n' +
    '  - Water bottle packs\n' +
    '  (Note: Names may sometimes be abbreviated)\n' +
    '- Both Alkaline and Spring water can be packaged in:\n' +
    '  - Standard plastic\n' +
    '  - BPA free plastic\n' +
    '  (If unsure about the type of bottle, assume it\'s "standard plastic").\n\n' +
    'Instructions:\n' +
    '1. If the \'Driver Notes\' mentions "adjust delivery", "change delivery", "wants x bottles in the future" you will review the account of the customer and state the change to their delivery amount.\n' +
    '2. A customer might want to switch from water products from alkaline to spring etc...\n' +
    '3. Be mindful that the message should make clear that the change is something that applies to future delieveries and not about the current delivery. Look out for words like "every" and "future".\n' +
    '4. If ever anbiguous or unclear, you must respond with "Needs Review"\n' +
    '5. If the message does not contain anything having to do with a change to future deliveries, you should respond with "N/A"\n\n' +
    'Input Format:\n' +
    'A tuple of the form (\'Driver Notes\',\'Current Water Product\',\'Current Delivery Amount\')\n' +
    '- \'Driver Notes\' may contain informal language or abbreviations.\n' +
    '- \'Current Water Product\' will be a potentially confusing / abbreviated string of either Alkaline, Spring, or water bottle packs. If ever unsure, assume Alkaline.\n' +
    '- \'Current Delivery Amount\' will be a positive integer.\n\n' +
    'Output Format:\n' +
    'A python dictionary of the form:\n' +
    '    {\n' +
    '        "change type": "Water Product Type" or "Delivery Amount",\n' +
    '        "change":"{New Water Product}" (if a change of "Water Product") or "{New Delivery Amount}" (if a change of "Delivery Amount"),\n' +
    '    }\n' +
    'or "Needs Review" or "N/A"';

        
        
        
    private static final Map<String, String> SECONDARY_PROMPT_TEXTS = new Map<String, String>{
        'Skip next delivery' => skip_next_delivery_prompt_text,
        'Location where bottles were left' => location_of_bottles_prompt_text,
        'Change monthly delivery amount' => change_monthly_delivery_amount_prompt_text,
        'Change address or contact info' => change_address_or_contact_prompt_text
    };

    private static final List<String> SKIP_NEXT_DELIVERY_OUTPUTS = new List<String>{
        '1',
        '2',
        'Needs Review',
        'N/A'
    };
    private static final List<String> CHANGE_ADDRESS_OR_CONTACT_OUTPUTS = new List<String>{
        '1',
        '2',
        'Needs Review',
        'N/A'
    };  
    
    public static void sendMisclassificationEmail(String inputText, String response) {
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
        
        mail.setToAddresses(new String[] {'info@tribecabeverage.com'});
        mail.setSubject('Misclassification of prompt');
        
        String bodyText = 'Time: ' + System.now() + '\n';
        bodyText += 'Input Text: ' + inputText + '\n';
        bodyText += 'Output Options: ' + response + '\n';
        bodyText += 'Secondary Prompt Text Options: ' + String.join(SECONDARY_PROMPT_TEXTS.values(), ', ');
    
        mail.setPlainTextBody(bodyText);
        Messaging.sendEmail(new Messaging.SingleEmailMessage[] {mail});
    }
    
    public static String send_api_request(List<String> promptTexts, String inputText) {
        Http http = new Http();
        HttpRequest request = new HttpRequest();
    
        // Endpoint for ChatGPT-4
        request.setEndpoint('callout:OpenAI_API/v1/chat/completions');
        request.setMethod('POST');
        request.setHeader('Content-Type', 'application/json');
    
        // Initialize the messages list
        List<Map<String, String>> messages = new List<Map<String, String>>();
        // Add system role messages
        for (String text : promptTexts) {
            messages.add(new Map<String, String>{'role' => 'system', 'content' => text});
        }
        // Add the user role message
        messages.add(new Map<String, String>{'role' => 'user', 'content' => inputText});
    
        // Set the body with the conversation payload
        Map<String, Object> payload = new Map<String, Object>{
            'model' => 'gpt-4',
            'messages' => messages,
            'temperature' => 0.7 // Adjust the temperature as required
        };
        request.setBody(JSON.serialize(payload));
    
        // Send the request
        HttpResponse response = http.send(request);
    
        if (response.getStatusCode() == 200) {
            return response.getBody(); // Return the raw response body
        } else {
            // Handle error
            System.debug('Error from OpenAI API: ' + response.getStatusCode() + ' ' + response.getBody());
            return null;
        }
    }


    public static List<String> prepare_second_prompt_input(String inputText, String modelResponse, Opportunity delivery) {
        if (SECONDARY_PROMPT_TEXTS.containsKey(modelResponse)) {
            if (modelResponse == 'Skip next delivery') {
                Account account = [SELECT Name, Frequency__c FROM Account WHERE Id = :delivery.AccountId]; // Use the correct relationship field
                Map<String, String> frequency_map = new Map<String, String>{
                    'Weekly' => 'Weekly',
                    'Bi-Weekly' => 'Biweekly',
                    '15 Days' => 'Biweekly',
                    '30 Days' => 'Monthly',
                    '60 Days' => 'Bimonthly',
                    '4 Weeks' => 'Monthly'
                };

                if (account.Frequency__c == 'Call in') {
                    return new List<String>{'Skip next delivery',
                        'Needs Review: Account ' + account.Name + ' said to the driver "' + inputText + '" which has been automatically interpreted as wanting to skip their next delivery, no action was taken as this account has their frequency set at "Call in"'};
                } else {
                    return new List<String> {'Skip next delivery', '(\'' + inputText + '\', \'' + Date.today().format() + '\', \'' + frequency_map.get(account.Frequency__c) + '\')'};
                }
            } else if (modelResponse == 'Location where bottles were left'){
                return new List<String> {'Location where bottles were left',inputText};
            } else if (modelResponse == 'Change address or contact info'){
                Account account = [SELECT Name, ShippingAddress, ShippingStreet, ShippingCity, ShippingState, ShippingPostalCode FROM Account WHERE Id = :delivery.AccountId];
                String address = '';
                if (String.isNotBlank(account.ShippingStreet)) {
                    address += account.ShippingStreet;
                }
                
                if (String.isNotBlank(account.ShippingCity)) {
                    if (String.isNotBlank(address)) {
                        address += ' ';
                    }
                    address += account.ShippingCity;
                }
                
                if (String.isNotBlank(account.ShippingState)) {
                    if (String.isNotBlank(address)) {
                        address += ', ';
                    }
                    address += account.ShippingState;
                }
                
                if (String.isNotBlank(account.ShippingPostalCode)) {
                    if (String.isNotBlank(address)) {
                        address += ' ';
                    }
                    address += account.ShippingPostalCode;
                }
                return new List<String> {'Change address or contact info', '("'+inputText+'", "' + address + '", "' + account.Name + '")'};
            } else if (modelResponse == 'Change monthly delivery amount'){
                Account account = [SELECT Name, Amount_of_Bottles__c, Water_Type__c FROM Account WHERE Id = :delivery.AccountId];
                return new list<String> {'Change monthly delivery amount','("'+inputText+ '", "' + account.Water_Type__c + '", "' + account.Amount_of_Bottles__c +'")'};
            }
        }
        return null; // Add a return statement for cases where the if conditions are not met
    }
    public static void handle_second_response(String secondResponse, String firstResponse,Opportunity delivery, String driverNotes){
        
        List<String> rowData = new List<String> {DateTime.now().format(),driverNotes,firstResponse, delivery.Name};
        // We list through the 4 types of classifications of interest. Skipping Delivery is the frist
        // In this case we update the next delivery to be in 2 weeks.
        Map<String, Object> deserializedResponse = (Map<String, Object>)JSON.deserializeUntyped(secondResponse);
        List<Object> choices = (List<Object>)deserializedResponse.get('choices');
        
        // check to see that the response from ChatGPT is appropriate
        if(choices != null && !choices.isEmpty()) {  
                Map<String, Object> firstChoice = (Map<String, Object>)choices.get(0);
            	Map<String, Object> message = (Map<String, Object>) firstChoice.get('message');
            	String text = (String) message.get('content');
            	if (firstResponse.toLowerCase() ==  'skip next delivery'){
                switch on text.toLowerCase() {
                    when '1', '2'{
                        adjustDeliveryCloseDate(delivery, Integer.valueOf(text));
                        rowData.add('Pushed back delivery for '+text+ ' periods.');
                    }
                    when 'n/a' {
                        rowData.add('No action taken. The Driver Note seems not to have anything to do with skipping a delivery.');
                    }
                    when 'na' {
                        rowData.add('No action taken. The Driver Note seems not to have anything to do with skipping a delivery.');
                    }
                    when 'needs review' {
                        rowData.add('NEEDS REVIEW: No action taken. Could not interpret Driver Note.');
                    }
                }
           
                // The second option is where the bottles are left off.
                // In this case, we email the customer to let them know about the bottle drop off location.
                } else if (firstResponse.toLowerCase() == 'location where bottles were left'){
                    if (text.toLowerCase() == 'n/a'|| text.toLowerCase() == 'na' ){
                        rowData.add('No action taken. The Driver Note seems not to have anything to with the location of where the bottles were placed.');
                    } else {
                        rowData.add('Sent the following message to Customer: '+ text);
                    }    
                // The third option is if there is a change to the monthly delivery amount
            	} else if (firstResponse.toLowerCase() == 'change monthly delivery amount') {
                    if (text.toLowerCase() == 'n/a'|| text.toLowerCase() == 'na' || text.toLowercase() == '"n/a"' || text.toLowercase() == '\'n/a\'' ){
                        rowData.add('No action taken. The Driver Note seems not to have anything to with a change to their monthly delivery.');       
                    } else if (text.toLowerCase() == 'needs review'){
                    	rowData.add('NEEDS REVIEW: the driver\'s message seems to be asking for something more than what ChatGPT can do.');
               		} else {
                       Map<String, Object> objectMap = (Map<String, Object>) JSON.deserializeUntyped(text);
                        
                        // Cast the values to String and create a Map<String, String>
                        Map<String, String> accountChange = new Map<String, String>();
                        for (String key : objectMap.keySet()) {
                            accountChange.put(key, (String) objectMap.get(key));
                        }  
                        if (accountChange.get('change type').toLowerCase()  == 'water product type') {
                            update_water_type(delivery, accountChange.get('change'));
                            rowData.add('Customer Water product type changed to: ' + accountChange.get('change'));
                        } else if (accountChange.get('change type').toLowerCase() == 'delivery amount'){
                            try{
                                Integer bottle_change = Integer.valueOf(accountChange.get('change'));
                                update_bottle_amount(delivery, bottle_change);
                                rowData.add('No action taken. The Driver Note seems not to have anything to with a change to their monthly delivery.');
                            } catch (Exception e){
                                rowData.add('NEEDS REVIEW: Salesforce could not interpret the monthly bottle delivery amount: '+accountChange.get('change'));
                            }   
                        } else {
                            rowData.add('NEEDS REVIEW: Salesforce could not interpret the ChatGPT\'s output regarding a change to the monthly bottle delivery. Here is the output: '+accountChange.get('change'));
                        }
                    }
                    
                } else if (firstResponse.toLowerCase() ==  'change address or contact info'){
                    if (text.toLowerCase() == 'n/a'|| text.toLowerCase() == 'na' ){
                        rowData.add('No action taken. The Driver Note seems not to have anything to with a change to their address or contact information.');       
                    } else if (text.toLowerCase() == 'needs review'){
                    	rowData.add('NEEDS REVIEW: the driver\'s message seems to be asking for something more than what ChatGPT can do.');
               		} else {
                        Map<String, Object> objectMap = (Map<String, Object>) JSON.deserializeUntyped(text);
                        
                        // Cast the values to String and create a Map<String, String>
                        Map<String, String> contactChange = new Map<String, String>();
                        for (String key : objectMap.keySet()) {
                            contactChange.put(key, (String) objectMap.get(key));
                        }                        
                        if (contactChange.get('change').toLowerCase()  == 'address') {
                            update_shipping_address(delivery, contactChange.get('address'));
                            rowData.add('Customer Address changed to: ' + contactChange.get('address'));
                        } else if (contactChange.get('change').toLowerCase() == 'contact'){
                            update_account_notes (delivery, contactChange.get('contact name'),contactChange.get('contact number'));
                            rowData.add('Customer Contact Info updated in Notes.. New Contact: ' + contactChange.get('contact Name')+', '+contactChange.get('contact number'));
                        } else {
                            rowData.add('NEEDS REVIEW: Salesforce could not interpret the ChatGPT\'s output regarding a change to the monthly bottle delivery. Here is the output: '+contactChange.get('change'));
                        }
                    }
                }
        // If ChatGPT's response is not appropriate, we make note of this in the system.
        } else {
            System.debug('No choices available in the response.');
            rowData.add('ChatGPT response empty. Here\'s the raw api response: '+secondResponse);
        }
        add_row_to_google_sheets(rowData);
    }
    public static void adjustDeliveryCloseDate(Opportunity opp, Integer deliveryAdjustment) {
        if (opp == null || opp.AccountId == null) {
            System.debug('Opportunity or associated Account is null.');
            return;
        }

        // Query the associated Account for Frequency__c
        Account relatedAccount = [SELECT Frequency__c FROM Account WHERE Id = :opp.AccountId LIMIT 1];

        // Query for the most recent Delivery with Delivery_Is_New__c = true
        Opportunity recentDelivery = [SELECT Id, CloseDate FROM Opportunity 
                                 WHERE Account.Id = :relatedAccount.Id 
                                 AND Delivery_Is_New__c = true 
                                 ORDER BY CloseDate DESC LIMIT 1];


        if (recentDelivery != null) {
            // Adjust the CloseDate based on Frequency__c and deliveryAdjustment
            recentDelivery.CloseDate = calculateAdjustedCloseDate(recentDelivery.CloseDate, relatedAccount.Frequency__c, deliveryAdjustment);
            update recentDelivery;

            System.debug('Adjusted CloseDate: ' + recentDelivery.CloseDate);
        } else {
            System.debug('No recent delivery found for the Account.');
        }
    }

    public static Date calculateAdjustedCloseDate(Date currentCloseDate, String frequency, Integer adjustmentFactor) {
        // Logic to calculate new CloseDate based on frequency and adjustment factor
        // This is a simplified version and should be adjusted based on your specific logic and frequency definitions
        Integer daysToAdd = 0;
        switch on frequency {
            when 'Weekly' {
                daysToAdd = 7 * adjustmentFactor;
            }
            when 'Bi-Weekly', '15 Days' {
                daysToAdd = 14 * adjustmentFactor;
            }
            when '30 Days', '4 Weeks' {
                daysToAdd = 30 * adjustmentFactor;
            }
            when '60 Days' {
                daysToAdd = 60 * adjustmentFactor;
            }
            when else {
                System.debug('Unknown frequency');
            }
        }
        return currentCloseDate.addDays(daysToAdd);
    }
    public static void update_bottle_amount(Opportunity opp, Integer bottleChange) {
        if (opp == null || opp.AccountId == null) {
            // Handle error: Opportunity or its related Account is not provided
            System.debug('Opportunity or related Account is missing');
            return;
        }

        // Retrieve the associated Account
        Account relatedAccount = [SELECT Id, Amount_of_Bottles__c FROM Account WHERE Id = :opp.AccountId LIMIT 1];

        // Query for the most recent delivery Opportunity
        Opportunity recentDelivery = [SELECT Id, Bottles_To_Be_Delivered__c, Amount FROM Opportunity 
                                      WHERE AccountId = :relatedAccount.Id 
                                      AND Delivery_Is_New__c = true 
                                      ORDER BY CloseDate DESC LIMIT 1];

        // Check if a recent delivery is found
        if (relatedAccount != null) {
            // Update Account and recent delivery Opportunity
            relatedAccount.Amount_of_Bottles__c = bottleChange;
            if (recentDelivery != null) {
                recentDelivery.Bottles_To_Be_Delivered__c = bottleChange;
                recentDelivery.Amount = bottleChange;
            	update recentDelivery;
            }
            // Perform the update operation
            update recentDelivery;
        } else {
            System.debug('No recent delivery found for the Account.');
        }
    } 
    public static void update_water_type(Opportunity opp, String waterTypeChange) {
        if (opp == null || opp.AccountId == null || String.isEmpty(waterTypeChange)) {
            // Handle error: Opportunity, its related Account, or waterTypeChange is not provided
            System.debug('Opportunity, related Account, or waterTypeChange is missing');
            return;
        }

        // Retrieve the associated Account
        Account relatedAccount = [SELECT Id, Water_Type__c FROM Account WHERE Id = :opp.AccountId LIMIT 1];

        // Update the water type of the Account
        relatedAccount.Water_Type__c = waterTypeChange;

        // Perform the update operation
        update relatedAccount;
    }
    public static void update_shipping_address(Opportunity opp, String addressString) {
        if (opp == null || opp.AccountId == null || String.isBlank(addressString)) {
            System.debug('Opportunity, related Account, or address is missing');
            return;
        }

        // Retrieve the associated Account
        Account relatedAccount = [SELECT Id, ShippingStreet, ShippingCity, ShippingState, ShippingPostalCode FROM Account WHERE Id = :opp.AccountId LIMIT 1];

        // Parse and update the shipping address components
        parseAndUpdateAddress(relatedAccount, addressString);

    }

    public static void parseAndUpdateAddress(Account account, String addressString) {
        // Split the address string into components
        List<String> addressParts = addressString.split(',');

        // Update street, city, state, and zip
        if (!addressParts.isEmpty()) {
            account.ShippingStreet = addressParts.size() > 0 ? addressParts[0].trim() : '';
            account.ShippingCity = addressParts.size() > 1 ? addressParts[1].trim() : '';
            account.ShippingState = addressParts.size() > 2 ? addressParts[2].trim().split(' ')[0] : '';
            account.ShippingPostalCode = addressParts.size() > 2 && addressParts[2].trim().split(' ').size() > 1 ? addressParts[2].trim().split(' ')[1] : '';
        }
        update account;
    }
    
    
    public static void update_account_notes(Opportunity opp, String contact_name, String contact_change) {
        if (opp == null || opp.AccountId == null || String.isBlank(contact_name) || String.isBlank(contact_change)) {
            // Handle error: Opportunity or its related Account is not provided, or strings are blank
            System.debug('Opportunity, related Account, contact_name, or contact_change is missing');
            return;
        }

        // Retrieve the associated Account
        Account relatedAccount = [SELECT Id, Notes_1__c FROM Account WHERE Id = :opp.AccountId LIMIT 1];

        // Append the new contact information to the Notes
        String newNoteEntry = 'Additional Contact: ' + contact_name + ' - ' + contact_change;
        if(String.isNotBlank(relatedAccount.Notes_1__c)) {
            relatedAccount.Notes_1__c += '\n' + newNoteEntry; // Append with a newline if there's existing content
        } else {
            relatedAccount.Notes_1__c = newNoteEntry; // Set as the first entry if Notes is currently empty
        }

        // Perform the update operation
        update relatedAccount;
    }    
    public static void main(String inputText, Opportunity delivery){
        String firstResponse = send_api_request(new List<String>{MAIN_PROMPT_TEXT,MAIN_PROMPT_TEXT_EXAMPLES}, inputText);
        
        // Deserialize the JSON string to a Map
        Map<String, Object> deserialized = (Map<String, Object>) JSON.deserializeUntyped(firstResponse);
        
        // Extract the 'choices' list from the deserialized Map
        List<Object> choices = (List<Object>) deserialized.get('choices');
        
        String textResponse = '';
        
        if (choices != null && !choices.isEmpty()) {
            // Extract the 'text' from the first item of the 'choices' list
            Map<String, Object> firstChoice = (Map<String, Object>) choices.get(0);
            Map<String, Object> message = (Map<String, Object>) firstChoice.get('message');
            textResponse = (String) message.get('content');
            system.debug('text response: '+textResponse);
            // Parse the textResponse to extract individual items
            String trimmedList = textResponse.substring(1, textResponse.length() - 1).trim();
            // Remove anything from the string except for what is in brackets.
            Pattern pattern = Pattern.compile('\\["(.*?)"\\]');
            Matcher matcher = pattern.matcher(trimmedList);
            
            // Check if the pattern is found in the input string
            if (matcher.find()) {
                // Return the first match
                trimmedList = matcher.group(1);
            }
            else{
                trimmedList = '';
            }
            // Replace Python single quotes with double quotes if present
            trimmedList = trimmedList.replace('\'', '"');
        
            // Split the string by '","' to get the individual elements
            List<String> OpenAIFirstPromptResponses = trimmedList.split('","');
        
            // Trim quotes from start and end of each element
            for (Integer i = 0; i < OpenAIFirstPromptResponses.size(); i++) {
                String element = OpenAIFirstPromptResponses[i];
                if (element.startsWith('"') && element.endsWith('"')) {
                    OpenAIFirstPromptResponses[i] = element.substring(1, element.length() - 1);
                }
            }
            for(String response : OpenAIFirstPromptResponses) {
                if (SECONDARY_PROMPT_TEXTS.containsKey(response)) {
                    // If a known secondary response is found, send another API request with the corresponding prompt
                    String promptText = SECONDARY_PROMPT_TEXTS.get(response);
                    List<String> secondInputText = prepare_second_prompt_input(inputText, response, delivery);
                    if (secondInputText == null){
                        System.debug('The list is null');                        
                    } else if (secondInputText[1].startsWith('Needs Review:')) {
                        // Code to execute if secondInputResponse starts with "Needs Review:"
                        System.debug('The string starts with "Needs Review:"');
                    } else {
                        String secondResponse = send_api_request(new List<String> {promptText}, secondInputText[1]); 
                        System.debug('problem: '+ response);
                        //output.add(response);
                        //output.add(secondResponse);
                        //system.debug('outputlist is: '+ output);
                        handle_second_response(secondResponse, response, delivery,inputText);
                    }
                } else {
                    system.debug('Output is: ' + textResponse);
                    sendMisclassificationEmail(inputText, textResponse); // Changed outputList to output, assuming output is the correct list
                }
            }            
           	
        } else {
            System.debug('No choices available in the first prompt response.');
            // Handle the case where no choices are available
        }
        
	}

    public static void add_row_to_google_sheets(List<String> rowData) {
        String SPREADSHEET_ID = '19VZGWuSHTYryKR_ATXXSGUfAcxfejvQ9j8oe1B6edGU';
        // Endpoint for appending data to a sheet
        String endpoint = 'callout:Google_Sheets_API/v4/spreadsheets/' + SPREADSHEET_ID + '/values/Sheet1:append?valueInputOption=USER_ENTERED';
        
        // Prepare the row data
        Map<String, Object> valueRange = new Map<String, Object>{
            'values' => new List<List<String>>{rowData}
        };
            String jsonBody = JSON.serialize(valueRange);
        
        // Create the HTTP request using Named Credential
        HttpRequest req = new HttpRequest();
        req.setEndpoint(endpoint);
        req.setMethod('POST');
        req.setHeader('Content-Type', 'application/json');
        req.setBody(jsonBody);
        
        // Send the request
        Http http = new Http();
        try {
            HttpResponse res = http.send(req);
            if (res.getStatusCode() == 200) {
                System.debug('Row added successfully');
            } else {
                System.debug('Error adding row: ' + res.getStatusCode() + ' ' + res.getBody());
            }
        } catch(Exception e) {
            System.debug('Exception during HTTP call: ' + e.getMessage());
        }
    } 
    public static void send_delivery_email(String emailBody, String recipientEmail) {
        // Create a new email message
        Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();

        // Set the recipient's email address
        String[] toAddresses = new String[] {recipientEmail};
        mail.setToAddresses(toAddresses);

        // Set the email subject
        mail.setSubject('Your Delivery has arrived');

        // Set the email body
        String emailHeader = 'Dear Customer,\n\n';
        String emailFooter = '\n\nBest regards,\nTribeca Beverage';
        mail.setPlainTextBody(emailHeader + emailBody + emailFooter);

        // Send the email
        Messaging.SendEmailResult[] results = Messaging.sendEmail(new Messaging.SingleEmailMessage[] {mail});
    }
}