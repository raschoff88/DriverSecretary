@isTest
public class DriverNotesSecretaryTest {
    @isTest static void testSendDeliveryEmail() {
        // Set up test data
        String testEmailBody = 'Your order will be delivered soon.';
        String testRecipientEmail = 'test@example.com';

        // Use Test.startTest() and Test.stopTest() to execute send_delivery_email
        Test.startTest();
        DriverNotesSecretary.send_delivery_email(testEmailBody, testRecipientEmail);
        Test.stopTest();

        // Assertions to ensure the email sending is set up correctly
        // Note: Salesforce doesn't send emails in test methods, so we can't verify the actual send.
        // However, we can assert that no exceptions occurred and the method execution completed.

        System.assert(true, 'Method completed successfully');
    }
    private class GoogleSheetsMock implements HttpCalloutMock {
        // Implement respond method to simulate HTTP response
        public HttpResponse respond(HttpRequest request) {
            HttpResponse response = new HttpResponse();
            response.setStatusCode(200);
            response.setBody('{"spreadsheetId": "19VZGWuSHTYryKR_ATXXSGUfAcxfejvQ9j8oe1B6edGU", "updatedRange": "Sheet1!A1", "updatedRows": 1, "updatedColumns": 1, "updatedCells": 1}');
            response.setHeader('Content-Type', 'application/json');
            return response;
        }
    }

    @isTest static void testAddRowToGoogleSheets() {
        // Set up test data
        List<String> testRowData = new List<String>{'Test Data 1', 'Test Data 2'};

        // Set the mock callout class
        Test.setMock(HttpCalloutMock.class, new GoogleSheetsMock());

        // Call the method within Test.startTest() and Test.stopTest() to simulate the callout
        Test.startTest();
        DriverNotesSecretary.add_row_to_google_sheets(testRowData);
        Test.stopTest();

        // Assertions
        // Note: Since actual callout is not made, we can't verify the row addition.
        // We can assert that no exceptions were thrown.
        System.assert(true, 'Method executed successfully');
    }
    @isTest static void testUpdateAccountNotes() {
        // Create test Account
        Account testAccount = new Account(
            Name = 'Test Account',
            Delivery_Region__c = 'Bronx',
            Frequency__c = 'Weekly',
            Amount_of_Bottles__c = 10,
            ShippingStreet = '123 Test Street',
            ShippingCity = 'Test City',
            ShippingState = 'PA'
        );
        insert testAccount;

        // Create test Opportunity
        Opportunity testOpportunity = new Opportunity(
            Name = 'Test Opportunity',
            AccountId = testAccount.Id,
            CloseDate = Date.today(),
            StageName= 'Delivery Due'
        );
        insert testOpportunity;

        // Prepare parameters for method call
        String testContactName = 'John Doe';
        String testContactChange = 'New Contact Information';

        // Call the method
        Test.startTest();
        DriverNotesSecretary.update_account_notes(testOpportunity, testContactName, testContactChange);
        Test.stopTest();

        // Refresh account from database to get updated notes
        Account updatedAccount = [SELECT Id, Notes_1__c FROM Account WHERE Id = :testAccount.Id];
        
        // Assertions
        System.assertNotEquals(null, updatedAccount.Notes_1__c, 'Account notes should not be null');
        System.assert(updatedAccount.Notes_1__c.contains(testContactName), 'Account notes should contain the contact name');
        System.assert(updatedAccount.Notes_1__c.contains(testContactChange), 'Account notes should contain the contact change information');
    }
    
    
    @isTest static void testParseAndUpdateAddress() {
        // Create test Account
        Account testAccount = new Account(
            Name = 'Test Account',
            Delivery_Region__c = 'Bronx',
            Frequency__c = 'Weekly',
            Amount_of_Bottles__c = 10,
            ShippingStreet = '123 Test Street',
            ShippingCity = 'Test City',
            ShippingState = 'PA'
        );
        insert testAccount;
        
        // Prepare test address string
        String testAddressString = '456 Test Lane, Testville, TX 12345';
        
        // Call the parseAndUpdateAddress method
        Test.startTest();
        DriverNotesSecretary.parseAndUpdateAddress(testAccount, testAddressString);
        Test.stopTest();
        
        // Refresh account from database to get updated address fields
        Account updatedAccount = [SELECT Id, ShippingStreet, ShippingCity, ShippingState, ShippingPostalCode FROM Account WHERE Id = :testAccount.Id];
        
        // Assertions
        System.assertEquals('456 Test Lane', updatedAccount.ShippingStreet, 'ShippingStreet should be updated correctly');
        System.assertEquals('Testville', updatedAccount.ShippingCity, 'ShippingCity should be updated correctly');
        System.assertEquals('TX', updatedAccount.ShippingState, 'ShippingState should be updated correctly');
        System.assertEquals('12345', updatedAccount.ShippingPostalCode, 'ShippingPostalCode should be updated correctly');
    }

    
    @isTest static void testUpdateShippingAddress() {
        // Create test Account
        Account testAccount = new Account(
            Name = 'Test Account',
            Delivery_Region__c = 'Bronx',
            Frequency__c = 'Weekly',
            Amount_of_Bottles__c = 10,
            ShippingStreet = '123 Test Street',
            ShippingCity = 'Test City',
            ShippingState = 'PA'
        );
        insert testAccount;

        // Create test Opportunity linked to the Account
        Opportunity testOpportunity = new Opportunity(
            Name = 'Test Opportunity',
            AccountId = testAccount.Id,
            CloseDate = Date.today(),
            StageName= 'Delivery Due'
        );
        insert testOpportunity;

        // Prepare test address string
        String testAddressString = '789 Test Boulevard, Testopolis, CA 98765';

        // Call the update_shipping_address method
        Test.startTest();
        DriverNotesSecretary.update_shipping_address(testOpportunity, testAddressString);
        Test.stopTest();

        // Refresh account from database to get updated address fields
        Account updatedAccount = [SELECT Id, ShippingStreet, ShippingCity, ShippingState, ShippingPostalCode FROM Account WHERE Id = :testAccount.Id];
        
        // Assertions
        System.assertEquals('789 Test Boulevard', updatedAccount.ShippingStreet, 'ShippingStreet should be updated correctly');
        System.assertEquals('Testopolis', updatedAccount.ShippingCity, 'ShippingCity should be updated correctly');
        System.assertEquals('CA', updatedAccount.ShippingState, 'ShippingState should be updated correctly');
        System.assertEquals('98765', updatedAccount.ShippingPostalCode, 'ShippingPostalCode should be updated correctly');
    }

    @isTest static void testUpdateWaterType() {
        // Create test Account
        Account testAccount = new Account(
            Name = 'Test Account',
            Delivery_Region__c = 'Bronx',
            Frequency__c = 'Weekly',
            Amount_of_Bottles__c = 10,
            Water_Type__c = 'Initial Water Type',
            ShippingStreet = '123 Test Street',
            ShippingCity = 'Test City',
            ShippingState = 'PA'
        );
        insert testAccount;

        // Create test Opportunity linked to the Account
        Opportunity testOpportunity = new Opportunity(
            Name = 'Test Opportunity',
            AccountId = testAccount.Id,
            CloseDate = Date.today(),
            StageName= 'Delivery Due'
        );
        insert testOpportunity;

        // Prepare test water type change
        String testWaterTypeChange = 'Spring';

        // Call the update_water_type method
        Test.startTest();
        DriverNotesSecretary.update_water_type(testOpportunity, testWaterTypeChange);
        Test.stopTest();

        // Refresh account from database to get updated water type
        Account updatedAccount = [SELECT Id, Water_Type__c FROM Account WHERE Id = :testAccount.Id];
        
        // Assertions
        System.assertEquals(testWaterTypeChange, updatedAccount.Water_Type__c, 'Water_Type__c should be updated to the new water type');
    }
    
    @isTest static void testUpdateBottleAmount() {
        // Create test Account
        Account testAccount = new Account(
            Name = 'Test Account',
            Delivery_Region__c = 'Bronx',
            Frequency__c = 'Weekly',
            ShippingStreet = '123 Test Street',
            ShippingCity = 'Test City',
            ShippingState = 'PA',
            Amount_of_Bottles__c = 5 // Initial bottle amount
        );
        insert testAccount;

        // Create test Opportunity (Delivery)
        Opportunity testDelivery = new Opportunity(
            Name = 'Test Delivery',
            AccountId = testAccount.Id,
            CloseDate = Date.today(),
            Delivery_Is_New__c = true,
            Bottles_To_Be_Delivered__c = 5,
            StageName= 'Delivery Due'
        );
        insert testDelivery;

        // Prepare test bottle change amount
        Integer testBottleChange = 10;

        // Call the update_bottle_amount method
        Test.startTest();
        DriverNotesSecretary.update_bottle_amount(testDelivery, testBottleChange);
        Test.stopTest();

        // Refresh account and opportunity from database
        Account updatedAccount = [SELECT Id, Amount_of_Bottles__c FROM Account WHERE Id = :testAccount.Id];
        Opportunity updatedDelivery = [SELECT Id, Bottles_To_Be_Delivered__c, Amount FROM Opportunity WHERE Id = :testDelivery.Id];

        // Assertions
        System.assertEquals(testBottleChange, updatedAccount.Amount_of_Bottles__c, 'Amount_of_Bottles__c should be updated to the new bottle amount');
        System.assertEquals(testBottleChange, updatedDelivery.Bottles_To_Be_Delivered__c, 'Bottles_To_Be_Delivered__c should be updated to the new bottle amount');
		System.assertEquals(testBottleChange, updatedDelivery.Amount, 'Amount should be updated to the new bottle amount');
    }


    @isTest static void testCalculateAdjustedCloseDate() {
        Date initialDate = Date.newInstance(2023, 1, 1);

        // Test for 'Weekly'
        Date expectedWeeklyDate = initialDate.addDays(7 * 2); // 2 weeks
        System.assertEquals(expectedWeeklyDate, DriverNotesSecretary.calculateAdjustedCloseDate(initialDate, 'Weekly', 2), 'Weekly adjustment is incorrect');

        // Test for 'Bi-Weekly' and '15 Days'
        Date expectedBiWeeklyDate = initialDate.addDays(14 * 2); // 4 weeks
        System.assertEquals(expectedBiWeeklyDate, DriverNotesSecretary.calculateAdjustedCloseDate(initialDate, 'Bi-Weekly', 2), 'Bi-Weekly adjustment is incorrect');
        System.assertEquals(expectedBiWeeklyDate, DriverNotesSecretary.calculateAdjustedCloseDate(initialDate, '15 Days', 2), '15 Days adjustment is incorrect');

        // Test for '30 Days' and '4 Weeks'
        Date expected30DaysDate = initialDate.addDays(30 * 1); // 1 month (30 days)
        System.assertEquals(expected30DaysDate, DriverNotesSecretary.calculateAdjustedCloseDate(initialDate, '30 Days', 1), '30 Days adjustment is incorrect');
        System.assertEquals(expected30DaysDate, DriverNotesSecretary.calculateAdjustedCloseDate(initialDate, '4 Weeks', 1), '4 Weeks adjustment is incorrect');

        // Test for '60 Days'
        Date expected60DaysDate = initialDate.addDays(60 * 1); // 2 months (60 days)
        System.assertEquals(expected60DaysDate, DriverNotesSecretary.calculateAdjustedCloseDate(initialDate, '60 Days', 1), '60 Days adjustment is incorrect');

        // Test for unknown frequency (should not change the date)
        System.assertEquals(initialDate, DriverNotesSecretary.calculateAdjustedCloseDate(initialDate, 'Unknown', 1), 'Unknown frequency adjustment is incorrect');
    }

    @isTest static void testAdjustDeliveryCloseDate() {
        // Create test Account
        Account testAccount = new Account(
            Name = 'Test Account',
            Delivery_Region__c = 'Bronx',
            Frequency__c = 'Weekly',
            Amount_of_Bottles__c = 10,
            ShippingStreet = '123 Test Street',
            ShippingCity = 'Test City',
            ShippingState = 'PA'            
        );
        insert testAccount;

        // Create test Opportunity (Delivery)
        Opportunity testDelivery = new Opportunity(
            Name = 'Test Delivery',
            AccountId = testAccount.Id,
            CloseDate = Date.today(),
            Delivery_Is_New__c = true,
            StageName= 'Delivery Due'
        );
        insert testDelivery;

        // Prepare test delivery adjustment
        Integer testDeliveryAdjustment = 1; // Adjust by 1 week for this test

        // Call the adjustDeliveryCloseDate method
        Test.startTest();
        DriverNotesSecretary.adjustDeliveryCloseDate(testDelivery, testDeliveryAdjustment);
        Test.stopTest();

        // Refresh the delivery opportunity from database
        Opportunity updatedDelivery = [SELECT Id, CloseDate FROM Opportunity WHERE Id = :testDelivery.Id];

        // Expected adjusted close date
        Date expectedCloseDate = Date.today().addDays(7 * testDeliveryAdjustment);

        // Assertions
        System.assertEquals(expectedCloseDate, updatedDelivery.CloseDate, 'CloseDate should be adjusted correctly based on the frequency');
    }
    
    @isTest static void testPrepareSecondPromptInput() {
        // Create test Account
        Account testAccount = new Account(
            Name = 'Test Account',
            Frequency__c = 'Weekly', // Change as needed for different test cases
            Amount_of_Bottles__c = 10,
            Water_Type__c = 'Spring',
            ShippingStreet = '123 Test Street',
            ShippingCity = 'Test City',
            ShippingState = 'PA',
			Delivery_Region__c ='Bronx'           
        );
        insert testAccount;

        // Create test Opportunity linked to the Account
        Opportunity testOpportunity = new Opportunity(
            Name = 'Test Opportunity',
            AccountId = testAccount.Id,
            CloseDate = Date.today(),
            StageName= 'Delivery Due'
        );
        insert testOpportunity;

        // Test different model responses
        System.assertEquals(new List<String>{'Skip next delivery', '(\'Test Input\', \'' + Date.today().format() + '\', \'Weekly\')'}, 
                            DriverNotesSecretary.prepare_second_prompt_input('Test Input', 'Skip next delivery', testOpportunity), 
                            'Response for Skip next delivery is incorrect');

        System.assertEquals(new List<String>{'Location where bottles were left', 'Test Input'}, 
                            DriverNotesSecretary.prepare_second_prompt_input('Test Input', 'Location where bottles were left', testOpportunity), 
                            'Response for Location where bottles were left is incorrect');

        System.assertEquals(new List<String>{'Change address or contact info', '("Test Input", "123 Test Street Test City, PA", "Test Account")'}, 
                            DriverNotesSecretary.prepare_second_prompt_input('Test Input', 'Change address or contact info', testOpportunity), 
                            'Response for Change address or contact info is incorrect');

        System.assertEquals(new List<String>{'Change monthly delivery amount', '("Test Input", "Spring", "10")'}, 
                            DriverNotesSecretary.prepare_second_prompt_input('Test Input', 'Change monthly delivery amount', testOpportunity), 
                            'Response for Change monthly delivery amount is incorrect');

        // Ensure null is returned for a non-matching model response
        System.assertEquals(null, 
                            DriverNotesSecretary.prepare_second_prompt_input('Test Input', 'Invalid response', testOpportunity), 
                            'Response should be null for non-matching model response');
    }


    private class MockHttpResponse implements HttpCalloutMock {
        // Implement the respond method to simulate the HTTP response
        public HttpResponse respond(HttpRequest request) {
            // Create a fake HTTP response
            HttpResponse response = new HttpResponse();
            response.setStatusCode(200);
            response.setBody('{"success": true, "data": "Mock response from OpenAI"}');
            response.setHeader('Content-Type', 'application/json');
            return response;
        }
    }

    @isTest static void testSendAPIRequest() {
        // Set the mock callout class
        Test.setMock(HttpCalloutMock.class, new MockHttpResponse());

        // Prepare test data
        List<String> promptTexts = new List<String>{'Test Prompt 1', 'Test Prompt 2'};
        String inputText = 'User input text';

        // Call the method within Test.startTest() and Test.stopTest() to simulate the callout
        Test.startTest();
        String response = DriverNotesSecretary.send_api_request(promptTexts, inputText);
        Test.stopTest();

        // Assertions
        System.assertNotEquals(null, response, 'The response should not be null');
        System.assert(response.contains('Mock response from OpenAI'), 'The response should contain the mock response data');
    }
    @isTest static void testSendMisclassificationEmail() {
        // Prepare test data
        String testInputText = 'Test Input';
        String testOutput = 'Test Output';

        // Call the method within Test.startTest() and Test.stopTest()
        Test.startTest();
        DriverNotesSecretary.sendMisclassificationEmail(testInputText, testOutput);
        Test.stopTest();

        // Since actual email sending is not done in test methods and we can't inspect the email details,
        // we simply assert that the method completes execution.
        System.assert(true, 'Method executed successfully');
    } 
    private static Opportunity createTestData() {
        Account testAccount = new Account(
            Name = 'Test Account',
            Delivery_Region__c = 'Bronx',
            Frequency__c = 'Weekly',
            Amount_of_Bottles__c = 10,
            ShippingStreet = '123 Test Street',
            ShippingCity = 'Test City',
            ShippingState = 'PA',
            ShippingPostalCode = '12345'
        );
        insert testAccount;
    
        Opportunity testOpportunity = new Opportunity(
            Name = 'Test Delivery',
            AccountId = testAccount.Id,
            CloseDate = Date.today(),
            Delivery_Is_New__c = true,
            StageName= 'Delivery Due'
        );
        insert testOpportunity;
    
        return testOpportunity;
    }    

    @isTest static void testHandleSecondResponse_SkipNextDelivery() {
        Opportunity testDelivery = createTestData();
        
        // Simulate ChatGPT response
        Map<String, String> contentMap = new Map<String, String>{
            'content' => '1'
        };
        
        // Create a list to hold the map
        List<Map<String, String>> choicesList = new List<Map<String, String>>();
        choicesList.add(contentMap);
        
        // Create the outer map with "choices" as key
        Map<String, Object> outerMap = new Map<String, Object>{
            'choices' => choicesList
        };

        // Serialize the map to a JSON string
        String simulatedChatGPTResponse = JSON.serialize(outerMap);
        
        Test.startTest();
        DriverNotesSecretary.handle_second_response(simulatedChatGPTResponse, 'Skip next delivery', testDelivery, 'Driver notes');
        Test.stopTest();
        
        // Assertions
        Opportunity updatedDelivery = [SELECT Id, CloseDate FROM Opportunity WHERE Id = :testDelivery.Id];
        System.assertEquals(Date.today().addDays(7), updatedDelivery.CloseDate, 'CloseDate should be adjusted by 1 week');
    }
    @isTest static void testHandleSecondResponse_ChangeAddress() {
        Opportunity testDelivery = createTestData();
    

        Map<String, Object> choiceContentMap = new Map<String, Object>{
            'content' =>'{"change":"address","address": "456 New Street, New City, NC"}'
        };
                    
        // List to hold the choices
        List<Map<String, Object>> choicesList = new List<Map<String, Object>>();
        choicesList.add(choiceContentMap);
        
        // Outermost map to hold the choices list
        Map<String, Object> outerMap = new Map<String, Object>{
            'choices' => choicesList
        };
                
                
        // Serialize the entire structure to JSON
        String simulatedChatGPTResponse = JSON.serialize(outerMap);
    
        Test.startTest();
        DriverNotesSecretary.handle_second_response(simulatedChatGPTResponse, 'Change address or contact info', testDelivery, 'Driver notes');
        Test.stopTest();
    
        // Assertions
        Account updatedAccount = [SELECT Id, ShippingStreet, ShippingCity, ShippingState FROM Account WHERE Id = :testDelivery.AccountId];
        System.assertEquals('456 New Street', updatedAccount.ShippingStreet, 'ShippingStreet should be updated');
        System.assertEquals('New City', updatedAccount.ShippingCity, 'ShippingCity should be updated');
        System.assertEquals('NC', updatedAccount.ShippingState, 'ShippingState should be updated');
    }
    @isTest static void testHandleSecondResponse_LocationWhereBottlesWereLeft() {
        Opportunity testDelivery = createTestData();
    
        // Simulate ChatGPT response for location where bottles were left
    	Map<String, Object> choiceMap = new Map<String, Object>{
            'content' => 'Front porch'
        };
        
        List<Map<String, Object>> choicesList = new List<Map<String, Object>>();
        choicesList.add(choiceMap);
        
        Map<String, Object> outerMap = new Map<String, Object>{
            'choices' => choicesList
        };

        String simulatedChatGPTResponse = JSON.serialize(outerMap);    
        Test.startTest();
        DriverNotesSecretary.handle_second_response(simulatedChatGPTResponse, 'Location where bottles were left', testDelivery, 'Driver notes');
        Test.stopTest();
    
        // Assertions
        // Since the method does not change any Salesforce records in this case, we only assert that no exceptions were thrown.
        System.assert(true, 'Method executed successfully for Location where bottles were left scenario');
    }
    @isTest static void testHandleSecondResponse_ChangeMonthlyDeliveryAmount() {
        Opportunity testDelivery = createTestData();
    
        // Simulate ChatGPT response for changing monthly delivery amount
    	Map<String, Object> choiceMap = new Map<String, Object>{
            'content' => '{"change type":"Delivery Amount", "change":"3"}'
        };
        
        List<Map<String, Object>> choicesList = new List<Map<String, Object>>();
        choicesList.add(choiceMap);
        
        Map<String, Object> outerMap = new Map<String, Object>{
            'choices' => choicesList
        };

        String simulatedChatGPTResponse = JSON.serialize(outerMap);
        
        Test.startTest();
        DriverNotesSecretary.handle_second_response(simulatedChatGPTResponse, 'Change monthly delivery amount', testDelivery, 'Driver notes');
        Test.stopTest();
    
        // Assertions
        Account updatedAccount = [SELECT Id, Amount_of_Bottles__c FROM Account WHERE Id = :testDelivery.AccountId];
        System.assertEquals(3, updatedAccount.Amount_of_Bottles__c, 'Amount_of_Bottles__c should be updated to 3');
    }
        
    @isTest static void testHandleSecondResponse_DefaultCase() {
        Opportunity testDelivery = createTestData();
    
        // Simulate ChatGPT response for a non-handled scenario
        String simulatedChatGPTResponse = '{"choices": [{"content": "Unknown response"}]}';
    
        Test.startTest();
        DriverNotesSecretary.handle_second_response(simulatedChatGPTResponse, 'Unknown prompt', testDelivery, 'Driver notes');
        Test.stopTest();
    
        // Assertions
        // Since the method does not change any Salesforce records in this default case, we only assert that no exceptions were thrown.
        System.assert(true, 'Method executed successfully for default case');
    }
    private class MainMockHttpResponse implements HttpCalloutMock {
        public HttpResponse respond(HttpRequest request) {
            // Check if the request body contains 'Sample driver note'
            if (request.getBody().contains('Picked up cooler')) {
                // Construct the first response
                return constructFirstResponse();
            } else {
                // Construct the second response
                return constructSecondResponse();
            }
        }
    
        private HttpResponse constructFirstResponse() {
            HttpResponse response = new HttpResponse();
            response.setStatusCode(200);
    
            // Construct the first response body
            Map<String, Object> choiceMap = new Map<String, Object>{
                'content' => '["Location where bottles were left"]'
            };
    
            List<Map<String, Object>> choicesList = new List<Map<String, Object>>();
            choicesList.add(choiceMap);
    
            Map<String, Object> outerMap = new Map<String, Object>{
                'choices' => choicesList
            };
    
            String firstResponseBody = JSON.serialize(outerMap);
            response.setBody(firstResponseBody);
            response.setHeader('Content-Type', 'application/json');
            return response;
        }
    
        private HttpResponse constructSecondResponse() {
            HttpResponse response = new HttpResponse();
            response.setStatusCode(200);
            // Simulate ChatGPT response for location where bottles were left
            Map<String, Object> choiceMap = new Map<String, Object>{
                'content' => 'Front porch'
                    };
                        
                        List<Map<String, Object>> choicesList = new List<Map<String, Object>>();
            choicesList.add(choiceMap);
            
            Map<String, Object> outerMap = new Map<String, Object>{
                'choices' => choicesList
                    };    
            
            String secondResponseBody = JSON.serialize(outerMap);
            response.setBody(secondResponseBody);
            response.setHeader('Content-Type', 'application/json');
            return response;
        }
    }

    @isTest static void testMainMethod() {
        // Create test data for Account and Opportunity
        Opportunity testDelivery = createTestData(); // Assuming createTestData() is defined as previously

        // Set the mock callout class
        Test.setMock(HttpCalloutMock.class, new MainMockHttpResponse());

        // Prepare the input text
        String inputText = 'Sample driver note';

        // Call the main method
        Test.startTest();
        DriverNotesSecretary.main(inputText, testDelivery);
        Test.stopTest();

        // Assertions
        // As actual API calls and some side effects are mocked, assert that the method runs without errors.
        // Specific assertions will depend on what you expect to happen in your method.
        System.assert(true, 'Method executed successfully');
    }    
    
}